{"version":3,"file":"generator.js","sources":["src/index.js"],"sourcesContent":["import randomBytes from 'randombytes';\r\nimport { exists, write } from 'crypto-io-fs';\r\nimport { join } from 'path';\r\nimport { homedir } from 'os';\r\nimport { info, succes, fail } from 'crypto-logger';\r\n\r\nexport default (keyPath = join(homedir(), '.ipfs', 'swarm.key')) =>\r\n  new Promise((resolve, reject) => {\r\n    info(`searching for swarm.key in ${keyPath}`)\r\n    const _exists = exists(keyPath);\r\n      if (_exists) {\r\n        succes(`found swarm.key in ${keyPath}`)\r\n        resolve();\r\n      } else {\r\n        fail(`searching for swarm.key in ${keyPath}`)\r\n        info(`generating new swarm.key in ${keyPath}`);\r\n        const bytes = randomBytes(32).toString('hex');\r\n        write(keyPath, `/key/swarm/psk/1.0.0/\r\n  /base16/\r\n  ${bytes}`).then(() => succes(`saved swarm.key @${keyPath}`));\r\n      }\r\n});\r\n"],"names":["keyPath","join","homedir","Promise","resolve","reject","_exists","exists","bytes","randomBytes","toString","then","succes"],"mappings":";;;;;;;;;;AAMA,aAAe,CAACA,UAAUC,UAAKC,YAAL,EAAgB,OAAhB,EAAyB,WAAzB,CAAX,KACb,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;oBACzB,8BAA6BL,OAAQ,EAA3C;QACMM,UAAUC,kBAAOP,OAAP,CAAhB;MACMM,OAAJ,EAAa;wBACH,sBAAqBN,OAAQ,EAArC;;GADF,MAGO;sBACC,8BAA6BA,OAAQ,EAA3C;sBACM,+BAA8BA,OAAQ,EAA5C;UACMQ,QAAQC,YAAY,EAAZ,EAAgBC,QAAhB,CAAyB,KAAzB,CAAd;qBACMV,OAAN,EAAgB;;IAEpBQ,KAAM,EAFF,EAEKG,IAFL,CAEU,MAAMC,oBAAQ,oBAAmBZ,OAAQ,EAAnC,CAFhB;;CAVN,CADF;;"}